#!python3

from fastapi import FastAPI
from pydantic import BaseModel
from typing import List

app = FastAPI()

class Portfolio(BaseModel):
    owner: str
    holdings: List[str]

@app.get("/")
def read_root():
    return {"message": "Welcome to Market Metrics API"}

# Health Check
@app.get("/health")
def get_health():
    return 0

# Get key metrics for a given symbol (e.g., AAPL)
@app.get("/metrics/{symbol}")
def get_metrics(symbol: str):
    return {
        "symbol": symbol.upper(),
        "message": f"Basic placeholder metrics for {symbol.upper()}"
    }

# Compute and return moving average
@app.get("/moving-average/{symbol}?window=30")
def get_moving_average(symbol: str):
    return 0

# Return rolling volatility over time
@app.get("/volatility/{symbol}")
def get_volatility(symbol: str):
    return 0

# Compute and return correlation matrix
@app.get("/correlation?symbols=AAPL,MSFT,GOOGL")
def get_correlation_matrix():
    return 0

# Sharpe ratio based on the last 90 days

# Sharpe ratio is a financial metric that measures an investment's performance while considering its 
# associated risk. In essence, it tells investors whether the excess return generated by an investment 
# is adequate compensation for the additional risk they've undertaken compared to a risk-free investmen

# Formula: Sharpe Ratio = (Rp - Rf) / Standard Deviation
# Rp: The investment's rate of return (either historical or expected).
# Rf: The risk-free rate of return, typically represented by a short-term US Treasury bond yield 
#     or the cash rate.
# Standard Deviation: A measure of the investment's volatility or risk, indicating how much its 
#                     returns fluctuate around the average return. 

@app.get("/sharpe-ratio/{symbol}")
def get_sharpe_ratio(symbol: str):
    return 0

# Return a chart of price + moving averagesd
@app.get("/chart/{symbol}")
def get_chart(symbol: str):
    return 0

@app.post("/portfolio")
def summarize_portfolio(portfolio: Portfolio):
    num_holdings = len(portfolio.holdings)
    return {
        "message": f"Portfolio received for {portfolio.owner}",
        "num_stocks": num_holdings,
        "tickers": portfolio.holdings
    }
